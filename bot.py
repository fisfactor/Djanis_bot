import os
import logging
import time
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
import openai

# üîë –ö–ª—é—á–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# üîß –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üë§ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –ø–æ user_id
user_specialists = {}

# üìã –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –∏ –∏—Ö —Å—Ç–∏–ª–∏
specialists = {
    "–í–ò–ó–£–ê–õ–´": "–¢—ã ‚Äî AI-–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–∑—É–∞–ª–æ–≤. –ü–æ–º–æ–≥–∞–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞, Reels –∏ Stories. –ì–æ–≤–æ—Ä–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ, —Å –∏–∑—é–º–∏–Ω–∫–æ–π.",
    "–ü–†–ê–í–û–í–ï–î": "–¢—ã ‚Äî AI-–ü—Ä–∞–≤–æ–≤–µ–¥ –ó–∞—â–∏—Ç–Ω–∏–∫ –ß–µ–ª–æ–≤–µ–∫–∞. –î–∞—ë—à—å —Å–æ–≤–µ—Ç—ã –ø–æ –≤–µ–∫—Å–µ–ª—å–Ω–æ–º—É, –ø—Ä–∞–≤–æ–≤–æ–º—É –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º—É —Å—É–≤–µ—Ä–µ–Ω–∏—Ç–µ—Ç—É, –≥–æ–≤–æ—Ä–∏—à—å —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –∏ —É–≤–∞–∂–µ–Ω–∏–µ–º.",
    "–í–ï–ö–°–ï–õ–¨": "–¢—ã ‚Äî AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –í–µ–∫—Å–µ–ª—å–Ω–æ–º—É –ø—Ä–∞–≤—É. –û—Ç–≤–µ—á–∞–µ—à—å –ø–æ —à–∞–±–ª–æ–Ω–∞–º, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω–æ, —Å –æ—Ç—Å—ã–ª–∫–∞–º–∏ –∫ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –Ω–æ—Ä–º–∞–º.",
    "–õ–ò–ß–ù–û–°–¢–¨": "–¢—ã ‚Äî AI-–ü–æ–º–æ—â–Ω–∏–∫ –õ–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ –†–æ—Å—Ç–∞. –ì–æ–≤–æ—Ä–∏—à—å –º—è–≥–∫–æ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ, —Å –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏, –ø–æ–º–æ–≥–∞—è —á–µ–ª–æ–≤–µ–∫—É —Ä–∞—Å–∫—Ä—ã—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è."
}

# üß≠ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–í–ò–ó–£–ê–õ–´"), KeyboardButton("–ü–†–ê–í–û–í–ï–î")],
        [KeyboardButton("–í–ï–ö–°–ï–õ–¨"), KeyboardButton("–õ–ò–ß–ù–û–°–¢–¨")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏, —Å –∫–∞–∫–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —Ç—ã —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è:", reply_markup=reply_markup)

# üß† –ó–∞–ø–æ–º–Ω–∏—Ç—å –≤—ã–±–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    user_id = update.effective_user.id
    if choice in specialists:
        user_specialists[user_id] = choice
        await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º: {choice}")
    else:
        await handle_message(update, context)  # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

# üí¨ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    specialist = user_specialists.get(user_id)

    if not specialist:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ /start üôè")
        return

    style_prompt = specialists[specialist]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": style_prompt},
                {"role": "user", "content": user_message}
            ]
        )
        reply = response.choices[0].message["content"]
        await update.message.reply_text(reply)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò üòî")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice))

    print("üöÄ –ú—É–ª—å—Ç–∏-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
