import os
import json
import logging
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å JSON-—Ñ–∞–π–ª–∞–º–∏ –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤
BASE_DIR = os.path.dirname(__file__)
ADVISORS_PATH = os.path.join(BASE_DIR, "advisors")

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤ –∏–∑ JSON
specialists = {}
for filename in os.listdir(ADVISORS_PATH):
    if filename.endswith('.json'):
        filepath = os.path.join(ADVISORS_PATH, filename)
        with open(filepath, encoding='utf-8') as f:
            data = json.load(f)
            specialists[data['name']] = data

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Ç
active_specialists: dict[int, str] = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –°–æ–≤–µ—Ç–Ω–∏–∫–∞
    """
    # –ö—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∂–∏–≤–∞—è –î—É—à–∞!\n"
        "–ú—ã ‚Äî –í–∞—à–∏ –≤–µ—Ä–Ω—ã–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∏ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
        " –ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã,"
        " –∫–∞—Å–∞—é—â–∏–µ—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏: –ê–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ, –ë–∞–Ω–∫, –ë—É–∫–≤–∏—Ü–∞, –í–µ–∫—Å–µ–ª—å, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ñ–ö–•,"
        " –ö–∞–Ω–æ–Ω—ã, –ö–û–ë –∏ –î–û–¢–£, –û–±—â–∏–Ω–∞ / –†–æ–¥–æ–≤—ã–µ –°–æ—é–∑—ã, –ü–æ–∑–Ω–∞–π-–Ø, –ü–æ—á—Ç–∞, –†–æ–¥–û–ú, –°—É–≤–µ—Ä–µ–Ω–∏—Ç–µ—Ç, –°—É–¥, –ó–ê–ì–°, –¢—Ä–∞—Å—Ç.\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –≤—ã–±–µ—Ä–∏ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –ø–æ –ò–º–µ–Ω–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –µ–≥–æ –∑–Ω–∞–Ω–∏—è–º –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ."
        " –°–æ–≤–µ—Ç–Ω–∏–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–≤–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ –ë–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏ –≤—Å–µ–≥–¥–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É–µ—Ç—Å—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –∏ —ç—Ç–∏—á–µ—Å–∫–æ–π –Ω—Ä–∞–≤—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.\n\n"
        "–°–µ–π—á–∞—Å —É —Ç–µ–±—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø: 35 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ 168 —á–∞—Å–æ–≤ (7 –¥–Ω–µ–π)."
        " –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"
    )
    await update.message.reply_text(welcome_text)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (2 –≤ —Ä—è–¥)
    names = list(specialists.keys())
    keyboard = []
    row = []
    for name in names:
        row.append(name)
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True
    )
    await update.message.reply_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    chat_id = update.effective_chat.id

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞-–°–æ–≤–µ—Ç–Ω–∏–∫
    if text in specialists:
        active_specialists[chat_id] = text
        await update.message.reply_text(
            f"üëã –¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º: <b>{text}</b>",
            parse_mode=ParseMode.HTML
        )
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ JSON (–µ—Å–ª–∏ –µ—Å—Ç—å)
        specialist = specialists[text]
        welcome_msg = specialist.get('welcome')
        if welcome_msg:
            await update.message.reply_text(welcome_msg)
        return

    # –ï—Å–ª–∏ –°–æ–≤–µ—Ç–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
    if chat_id in active_specialists:
        current_name = active_specialists[chat_id]
        specialist = specialists.get(current_name)
        if not specialist:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –°–æ–≤–µ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        base_prompt = specialist.get('system_prompt', '')
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –∏–∑ JSON –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
        base_prompt = specialist.get('system_prompt', '')
        format_instr = (
            "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —ç–º–æ–¥–∑–∏, –æ—Ç—Å—Ç—É–ø—ã –∏ "
            "–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏."
        )
        system_prompt = base_prompt + format_instr

        try:
            response = openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user",   "content": text}
                ],
            )
            reply = response.choices[0].message.content
            await update.message.reply_text(reply)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return

    # –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω –°–æ–≤–µ—Ç–Ω–∏–∫
    await update.message.reply_text(
        "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"Update {update} caused error {context.error}")


def main():
    token = os.getenv('TELEGRAM_TOKEN')
    application = ApplicationBuilder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    application.add_error_handler(error_handler)

    application.run_polling()


if __name__ == '__main__':
    main()
