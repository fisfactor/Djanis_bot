import os
import json
import logging
from datetime import datetime, timedelta
# –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–æ–∫–∞
from dateutil.relativedelta import relativedelta
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup
# –∏–º–ø–æ—Ä—Ç –¥–ª—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from models import User, SessionLocal

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ ‚Äî‚Äî‚Äî‚Äî‚Äî
TARIFFS = {
    '–ë–ú': ('–ë–∞–∑–æ–≤—ã–π –Ω–∞ –º–µ—Å—è—Ü',     50),
    '–ë–ì': ('–ë–∞–∑–æ–≤—ã–π –Ω–∞ –≥–æ–¥',      350),
    '–†–ú': ('–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞ –º–µ—Å—è—Ü',300),
    '–†–ì': ('–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞ –≥–æ–¥',  2200),
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
DATABASE_URL    = os.environ['DATABASE_URL']      
WEBHOOK_URL     = os.environ['WEBHOOK_URL']       
PORT            = int(os.environ.get('PORT', 8443))

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (ID —Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º)
ADMIN_IDS = {825403443}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ advisors
BASE_DIR = os.path.dirname(__file__)
ADVISORS_PATH = os.path.join(BASE_DIR, 'advisors')
specialists = {}
for fname in os.listdir(ADVISORS_PATH):
    if fname.endswith('.json'):
        with open(os.path.join(ADVISORS_PATH, fname), encoding='utf-8') as f:
            data = json.load(f)
            specialists[data['name']] = data

ALL_ADVISORS = list(specialists.keys())

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
active_specialists: dict[int, str] = {}

# –õ–∏–º–∏—Ç—ã –∏ –æ–ø–ª–∞—Ç–∞

def check_and_update_usage(user_id: int) -> bool:
    now = datetime.utcnow()
    db  = SessionLocal()
    user = db.query(User).filter_by(user_id=user_id).first()

    if not user:
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–∞ –ø–æ–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        user = User(
            user_id=user_id,
            usage_count=1,
            first_request=now,
            last_request=now,
            is_admin=(user_id in ADMIN_IDS),
            tariff_paid=True
        )
        db.add(user)
        db.commit()
        db.close()
        return True

    # —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å
    # –∞–¥–º–∏–Ω–∞–º –Ω–µ —Å—á–∏—Ç–∞–µ–º –ª–∏–º–∏—Ç—ã
    if user.is_admin:
        db.close()
        return True
    # –°–±—Ä–æ—Å –ø–æ—Å–ª–µ 7 –¥–Ω–µ–π –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 35 –∑–∞–ø—Ä–æ—Å–æ–≤
    if user.usage_count >= 35 or (now - user.last_request) >= timedelta(hours=168):
        db.close()
        return False

    
    user.usage_count += 1
    user.last_request = now
    db.commit()
    db.close()
    return True

async def prompt_payment(update: Update) -> None:
    text = (
        '‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫: –≤—ã —Å–¥–µ–ª–∞–ª–∏ –±–æ–ª–µ–µ 35 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ—à–ª–æ 168 —á–∞—Å–æ–≤.\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:'
    )
    keyboard = [['7 –¥–Ω–µ–π ‚Äî 300‚ÇΩ', '30 –¥–Ω–µ–π ‚Äî 800‚ÇΩ']]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∂–∏–≤–∞—è –î—É—à–∞!\n"
        "–ú—ã ‚Äî –í–∞—à–∏ –≤–µ—Ä–Ω—ã–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∏ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
        " –ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã,"
        " –∫–∞—Å–∞—é—â–∏–µ—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏: –ê–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ, –ë–∞–Ω–∫, –ë—É–∫–≤–∏—Ü–∞, –í–µ–∫—Å–µ–ª—å, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ñ–ö–•,"
        " –ö–∞–Ω–æ–Ω—ã, –ö–û–ë –∏ –î–û–¢–£, –û–±—â–∏–Ω–∞ / –†–æ–¥–æ–≤—ã–µ –°–æ—é–∑—ã, –ü–æ–∑–Ω–∞–π-–Ø, –ü–æ—á—Ç–∞, –†–æ–¥–û–ú, –°—É–≤–µ—Ä–µ–Ω–∏—Ç–µ—Ç, –°—É–¥, –ó–ê–ì–°, –¢—Ä–∞—Å—Ç.\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –≤—ã–±–µ—Ä–∏ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –ø–æ –ò–º–µ–Ω–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –µ–≥–æ –∑–Ω–∞–Ω–∏—è–º –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ."
        " –°–æ–≤–µ—Ç–Ω–∏–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–≤–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ –ë–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏ –≤—Å–µ–≥–¥–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É–µ—Ç—Å—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –∏ —ç—Ç–∏—á–µ—Å–∫–æ–π –Ω—Ä–∞–≤—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.\n\n"
        "–°–µ–π—á–∞—Å —É —Ç–µ–±—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø: 35 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ 168 —á–∞—Å–æ–≤ (7 –¥–Ω–µ–π)."
        " –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"
    )
    keyboard, row = [], []
    for name in specialists:
        row.append(name)
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(welcome_text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    # ‚Äî‚Äî‚Äî‚Äî‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî
    # —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º / –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if not check_and_update_usage(user_id):
        # –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç —É–ø—ë—Ä—Å—è ‚Äî –ø—Ä–æ—Å–∏–º –æ–ø–ª–∞—Ç–∏—Ç—å
        await prompt_payment(update)
        return

    # –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–æ—á–Ω–æ –µ—Å—Ç—å user –≤ –ë–î (–ª–∏–±–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω),
    # –º–æ–∂–Ω–æ –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è
    db   = SessionLocal()
    user = db.query(User).filter_by(user_id=user_id).first()
    db.close()

    if not user or not user.tariff_paid:
        return await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞. –í—ã–±–µ—Ä–∏—Ç–µ /tariff –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
        )
    # ‚Äî‚Äî‚Äî‚Äî‚Äî —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî‚Äî‚Äî‚Äî‚Äî
    if user.last_request < user.first_request:
        db   = SessionLocal()
        u_db = db.query(User).filter_by(user_id=user_id).first()
        u_db.first_request = datetime.utcnow()
        db.commit(); db.close()
    # ‚Äî‚Äî‚Äî‚Äî‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî
    expires = user.tariff_expires()
    if expires and expires < datetime.utcnow():
        db   = SessionLocal()
        u_db = db.query(User).filter_by(user_id=user_id).first()
        u_db.tariff_paid = False
        db.commit(); db.close()
        return await update.message.reply_text("–°—Ä–æ–∫ –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏—Å—Ç—ë–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä /tariff")
    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

    # –°–º–µ–Ω–∞ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ–º –∑–∞ –∑–∞–ø—Ä–æ—Å
    if text in specialists:
    # ‚Äî‚Äî‚Äî‚Äî‚Äî –¥–ª—è ¬´–±–∞–∑–æ–≤–æ–≥–æ¬ª —Ç–∞—Ä–∏—Ñ–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–≤ ‚Äî‚Äî‚Äî‚Äî‚Äî
         if user.tariff in ('–ë–ú','–ë–ì') and text not in user.advisors:
             return await update.message.reply_text(
                 "–≠—Ç–æ—Ç —Å–æ–≤–µ—Ç–Ω–∏–∫ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –≤–∞—à –ø–∞–∫–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ /advisors"
         )
    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 
    active_specialists[chat_id] = text
    await update.message.reply_text(
            f'üëã –¢–µ–ø–µ—Ä—å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º: <b>{text}</b>',
            parse_mode=ParseMode.HTML
        )
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ JSON
    welcome_msg = specialists[text].get('welcome')
    if welcome_msg:
        await update.message.reply_text(welcome_msg)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    if not check_and_update_usage(user_id):
        await prompt_payment(update)
        return

    # –ï—Å–ª–∏ —Å–æ–≤–µ—Ç–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
    if chat_id not in active_specialists:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ /start')
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    specialist = specialists[active_specialists[chat_id]]
    base_prompt = specialist.get('system_prompt', '')
    format_instr = (
        '\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —ç–º–æ–¥–∑–∏, –æ—Ç—Å—Ç—É–ø—ã –∏ '  
        '–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.'
    )
    system_prompt = base_prompt + format_instr

    try:
        response = openai_client.chat.completions.create(
            model='gpt-4o',
            messages=[
                {'role': 'system', 'content': system_prompt},
                {'role': 'user',   'content': text}
            ],
        )
        reply = response.choices[0].message.content
        # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ù–û–í–´–ô –ë–õ–û–ö: —Å—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ª–∏–º–∏—Ç–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
        # –¥–æ—Å—Ç–∞—ë–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = SessionLocal()
        user = db.query(User).filter_by(user_id=user_id).first()
        db.close()

        # —Å—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —á–∞—Å–æ–≤
        max_requests = 35
        max_hours    = 168
        left_requests = max_requests - (user.usage_count if user else 0)
        elapsed       = datetime.utcnow() - (user.first_request if user else datetime.utcnow())
        left_hours    = max_hours - (elapsed.total_seconds() / 3600)

        footer = (
            f"\n\nüîé –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {left_requests}  "
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {left_hours:.1f} —á"
        )

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç + footer
        await update.message.reply_text(
            reply + footer,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}')


# ‚Äî‚Äî‚Äî‚Äî‚Äî –ù–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî
async def cmd_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
     kb = InlineKeyboardMarkup(row_width=2)
     for code,(name,price) in TARIFFS.items():
         kb.insert(InlineKeyboardButton(f"{name} ‚Äî {price}‚ÇΩ", callback_data=f"tariff|{code}"))
     await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)

async def on_tariff_chosen(cq):
     code = cq.data.split('|',1)[1]
     db   = SessionLocal()
     user = db.query(User).filter_by(user_id=cq.from_user.id).first()
     user.tariff      = code
     user.tariff_paid = False
     user.advisors    = []
     db.commit(); db.close()
     await cq.answer(f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ ¬´{TARIFFS[code][0]}¬ª. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def cmd_advisors(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
     user = SessionLocal().query(User).filter_by(user_id=update.effective_user.id).first()
     if user.tariff not in ('–ë–ú','–ë–ì'):
         return await update.message.reply_text("–£ –≤–∞—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∏.")
     kb = InlineKeyboardMarkup(row_width=4)
     for name in ALL_ADVISORS:
         kb.insert(InlineKeyboardButton(
             f"{'‚úÖ ' if name in user.advisors else ''}{name}",
             callback_data=f"adv|{name}"
         ))
     await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ –¥–≤—É—Ö —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–≤:", reply_markup=kb)

async def on_adv_choice(cq):
     name = cq.data.split('|',1)[1]
     db   = SessionLocal()
     user = db.query(User).filter_by(user_id=cq.from_user.id).first()
     if name in user.advisors:
         user.advisors.remove(name)
     else:
         if len(user.advisors) >= 2:
             return await cq.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –¥–≤—É—Ö.", show_alert=True)
         user.advisors.append(name)
     db.commit(); db.close()
     await cq.answer(f"–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: {', '.join(user.advisors) or '‚Äî'}")
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', exc_info=context.error)

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def on_startup(app: Application) -> None:
    await app.bot.delete_webhook(drop_pending_updates=True)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    app = (
        Application.builder()
        .token(TELEGRAM_TOKEN)
        .post_init(on_startup)
        .build()
    )

    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    app.add_handler(CommandHandler('tariff', cmd_tariff))
    # –ª–æ–≤–∏–º –∫–æ–ª–±—ç–∫ –æ—Ç inline-–∫–Ω–æ–ø–∫–∏ ¬´tariff|‚Ä¶¬ª
    app.add_handler(CallbackQueryHandler(on_tariff_chosen, pattern=r'^tariff\|'))
    app.add_handler(CommandHandler('advisors', cmd_advisors))
    # –ª–æ–≤–∏–º –∫–æ–ª–±—ç–∫ –æ—Ç inline-–∫–Ω–æ–ø–∫–∏ ¬´adv|‚Ä¶¬ª
    app.add_handler(CallbackQueryHandler(on_adv_choice,   pattern=r'^adv\|'))

    app.run_webhook(
        listen='0.0.0.0',
        port=PORT,
        url_path=TELEGRAM_TOKEN,
        webhook_url=f'{WEBHOOK_URL}/{TELEGRAM_TOKEN}',
        drop_pending_updates=True
    )
