
import json
import os
import openai
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤ –ø–æ chat_id
active_specialists = {}

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
ADVISORS_PATH = "./advisors"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤
def load_specialists():
    specialists = {}
    for filename in os.listdir(ADVISORS_PATH):
        if filename.endswith(".json"):
            with open(os.path.join(ADVISORS_PATH, filename), "r", encoding="utf-8") as f:
                data = json.load(f)
                key = data.get("name", "").upper()
                specialists[key] = data
    return specialists

specialists = load_specialists()
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = list(sorted(specialists.keys()))
    keyboard = [buttons[i:i+2] for i in range(0, len(buttons), 2)]  # –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üåü –í—ã–±–µ—Ä–∏ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è: üåü", reply_markup=reply_markup)

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    current = user_states.get(user_id)
    if current and current in specialists:
        welcome = specialists[current].get("welcome", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        await update.message.reply_text(f"üìú –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ {current}:\n\n{welcome}")

    else:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text.strip().upper()

    if text in specialists:
        active_specialists[chat_id] = text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –°–æ–≤–µ—Ç–Ω–∏–∫–∞
        user_states[chat_id] = {"advisor": text, "greeted": False}

        specialist = specialists[text]

        if not user_states[chat_id]["greeted"]:
            await update.message.reply_text(specialist.get("welcome", "‚ö†Ô∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."), parse_mode=ParseMode.HTML)
            user_states[chat_id]["greeted"] = True

        await update.message.reply_text(f"üëã –¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º: <b>{text}</b>", parse_mode=ParseMode.HTML)

    elif text == "/INFO":
        current = active_specialists.get(chat_id)
        if current and current in specialists:
            await update.message.reply_text(specialists[current].get("welcome", "‚ö†Ô∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."), parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text("‚ùì –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ /start.")

    elif chat_id in active_specialists:
        current = active_specialists[chat_id]
        specialist = specialists.get(current)

        if not specialist:
            await update.message.reply_text("‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –°–æ–≤–µ—Ç–Ω–∏–∫–∞.")
            return

        system_prompt = specialist["system_prompt"]

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text}
            ]
        )

        reply = response.choices[0].message["content"]
        await update.message.reply_text(reply)

    else:
        await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ /start.")


def main():
    app = ApplicationBuilder().token(os.environ["TELEGRAM_TOKEN"]).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()


if __name__ == "__main__":
    main()
