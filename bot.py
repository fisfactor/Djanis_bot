import os
import json
import logging
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å JSON-—Ñ–∞–π–ª–∞–º–∏ –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤
BASE_DIR = os.path.dirname(__file__)
ADVISORS_PATH = os.path.join(BASE_DIR, "advisors")

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤ –∏–∑ JSON
specialists = {}
for filename in os.listdir(ADVISORS_PATH):
    if filename.endswith('.json'):
        filepath = os.path.join(ADVISORS_PATH, filename)
        with open(filepath, encoding='utf-8') as f:
            data = json.load(f)
            specialists[data['name']] = data

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Ç
active_specialists: dict[int, str] = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    names = list(specialists.keys())
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    keyboard = []
    row = []
    for name in names:
        row.append(name)
        if len(row) >= 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    text = update.message.text.strip()
    chat_id = update.effective_chat.id

    # –í—ã–±–æ—Ä –°–æ–≤–µ—Ç–Ω–∏–∫–∞
    if text in specialists:
        active_specialists[chat_id] = text
        await update.message.reply_text(
            f"üëã –¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º: <b>{text}</b>",
            parse_mode=ParseMode.HTML
        )
        return

    # –ï—Å–ª–∏ –°–æ–≤–µ—Ç–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenAI
    if chat_id in active_specialists:
        current_name = active_specialists[chat_id]
        specialist = specialists.get(current_name)
        if not specialist:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –°–æ–≤–µ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        system_prompt = specialist.get('system_prompt', '')
        user_text = text
        try:
            response = openai_client.chat.completions.create(
                model="gpt-4o",  # –∏–ª–∏ "gpt-4o-mini"
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user",   "content": user_text}
                ],
            )
            reply = response.choices[0].message.content
            await update.message.reply_text(reply)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return

    # –ï—Å–ª–∏ –°–æ–≤–µ—Ç–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
    await update.message.reply_text(
        "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"Update {update} caused error {context.error}")


def main():
    token = os.getenv('TELEGRAM_TOKEN')
    application = ApplicationBuilder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ polling
    application.run_polling()


if __name__ == '__main__':
    main()

