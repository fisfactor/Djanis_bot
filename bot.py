import os
import json
import logging
from datetime import datetime, timedelta

from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from sqlalchemy import create_engine, Column, BigInteger, Integer, Boolean, DateTime
from sqlalchemy.orm import declarative_base, sessionmaker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
DATABASE_URL = os.environ.get('DATABASE_URL', 'sqlite:///usage.db')
WEBHOOK_URL = os.environ['WEBHOOK_URL']  # e.g. https://YOUR-SERVICE.onrender.com
PORT = int(os.environ.get('PORT', '8443'))

# –ê–¥–º–∏–Ω—Å–∫–∏–µ ID (–¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
ADMIN_IDS = {825403443}  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ Telegram user_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLAlchemy
Base = declarative_base()
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(BigInteger, primary_key=True, index=True)
    user_id = Column(BigInteger, unique=True, nullable=False)
    usage_count = Column(Integer, default=0, nullable=False)
    is_admin = Column(Boolean, default=False)
    last_request = Column(DateTime, default=datetime.utcnow)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
Base.metadata.create_all(bind=engine)

# –ó–∞–≥—Ä—É–∑–∫–∞ –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ advisors
BASE_DIR = os.path.dirname(__file__)
ADVISORS_PATH = os.path.join(BASE_DIR, "advisors")
specialists = {}
for fname in os.listdir(ADVISORS_PATH):
    if fname.endswith('.json'):
        with open(os.path.join(ADVISORS_PATH, fname), encoding='utf-8') as f:
            data = json.load(f)
            specialists[data['name']] = data

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
active_specialists: dict[int, str] = {}

# –§—É–Ω–∫—Ü–∏–∏ —É—á–µ—Ç–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ bot.py)
def check_and_update_usage(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—á—ë—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç, False ‚Äî –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.
    """
    if user_id in ADMIN_IDS:
        return True

    now = datetime.utcnow()
    db = SessionLocal()
    user = db.get(User, user_id)
    if not user:
        user = User(user_id=user_id, first_ts=now, count=1, blocked=False)
        db.add(user)
        db.commit()
        db.close()
        return True

    if user.blocked:
        db.close()
        return False

    # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    user.count += 1
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if user.count >= 35 or (now - user.first_ts) >= timedelta(hours=168):
        user.blocked = True
    db.commit()
    blocked = user.blocked
    db.close()
    return not blocked
    pass

async def prompt_payment(update: Update) -> None:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
    """
    text = (
        "‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫: –≤—ã —Å–¥–µ–ª–∞–ª–∏ –±–æ–ª–µ–µ 35 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ—à–ª–æ 168 —á–∞—Å–æ–≤.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è:\n"
    )
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
    keyboard = [
        ["7 –¥–Ω–µ–π ‚Äî 300‚ÇΩ", "30 –¥–Ω–µ–π ‚Äî 800‚ÇΩ"],
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=markup)
    pass

# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = []
    row = []
    for name in specialists:
        row.append(name)
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=markup
    )

# –•—ç–Ω–¥–ª–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    text = update.message.text.strip()
    chat_id = update.effective_chat.id

    if not check_and_update_usage(user_id):
        await prompt_payment(update)
        return

    if text in specialists:
        active_specialists[chat_id] = text
        await update.message.reply_text(
            f"üëã –¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º: <b>{text}</b>",
            parse_mode=ParseMode.HTML
        )
        return

    if chat_id not in active_specialists:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ /start"
        )
        return

    specialist = specialists[active_specialists[chat_id]]
    # –õ–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    # ... —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", exc_info=context.error)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    async def on_startup(app):
       # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
       await app.bot.delete_webhook(drop_pending_updates=True)

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.post_init(on_startup)   # Registrates your startup callback
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è Webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TELEGRAM_TOKEN,    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        webhook_url=f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}",
        drop_pending_updates=True 
    )

if __name__ == "__main__":
    main()

