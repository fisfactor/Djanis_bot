import os
import json
import logging
import openai
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å JSON-—Ñ–∞–π–ª–∞–º–∏ –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤
BASE_DIR = os.path.dirname(__file__)
ADVISORS_PATH = os.path.join(BASE_DIR, "advisors")

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤ –∏–∑ JSON
specialists = {}
for filename in os.listdir(ADVISORS_PATH):
    if filename.endswith('.json'):
        filepath = os.path.join(ADVISORS_PATH, filename)
        with open(filepath, encoding='utf-8') as f:
            data = json.load(f)
            # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å –ø–æ–ª–µ "name"
            specialists[data['name']] = data

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Ç
active_specialists: dict[int, str] = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤
    """
    names = '\n'.join(f"- {name}" for name in specialists.keys())
    text = "üëã –í—ã–±–µ—Ä–∏ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è:\n" + names
    await update.message.reply_text(text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    text = update.message.text.strip()
    chat_id = update.effective_chat.id

    # 1) –í—ã–±–æ—Ä –°–æ–≤–µ—Ç–Ω–∏–∫–∞
    if text in specialists:
        active_specialists[chat_id] = text
        await update.message.reply_text(
            f"üëã –¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º: <b>{text}</b>",
            parse_mode=ParseMode.HTML
        )
        return

    # 2) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /INFO
    elif text.upper() == "/INFO":
        info = (
            "‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
            "- –ù–∞–ø–∏—à–∏ –∏–º—è –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞\n"
            "- /INFO ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "- –î—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –°–æ–≤–µ—Ç–Ω–∏–∫—É"
        )
        await update.message.reply_text(info)
        return

    # 3) –†–∞–±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º
    elif chat_id in active_specialists:
        user_text = text
        current_name = active_specialists[chat_id]
        specialist = specialists.get(current_name)
        if not specialist:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –°–æ–≤–µ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è OpenAI
        system_prompt = specialist.get('system_prompt', '')

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á OpenAI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        openai.api_key = os.getenv('OPENAI_API_KEY')
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",  # –∏–ª–∏ "gpt-4o-mini"
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user",   "content": user_text}
                ]
            )
            reply = response.choices[0].message.content
            await update.message.reply_text(reply)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return

    # 4) –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç—å "No error handlers are registered"
    """
    logging.error(f"Update {update} caused error {context.error}")


def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)

    # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
    token = os.getenv('TELEGRAM_TOKEN')

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()

