import os
import logging
import time
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import openai

# üîë –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

# üîß –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üë• –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_specialists = {}

# üìã –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
specialists = {
    "üé® –í–ò–ó–£–ê–õ–´": "–¢—ã ‚Äî AI-–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–∑—É–∞–ª–æ–≤. –ü–æ–º–æ–≥–∞–µ—à—å –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è Reels, Stories –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û–ø–∏—à–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ, —Å –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏.",
    "‚öñÔ∏è –ü–†–ê–í–û–í–ï–î": "–¢—ã ‚Äî AI-–ü—Ä–∞–≤–æ–≤–µ–¥. –ó–∞—â–∏—â–∞–µ—à—å –ø—Ä–∞–≤–∞ –ß–µ–ª–æ–≤–µ–∫–∞, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ—Ä–º—ã, –≥–æ–≤–æ—Ä–∏—à—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.",
    "üìú –í–ï–ö–°–ï–õ–¨": "–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≤–µ–∫—Å–µ–ª—å–Ω–æ–º—É –ø—Ä–∞–≤—É. –û—Ç–≤–µ—á–∞–µ—à—å —Å—Ç—Ä–æ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏, –¥–∞—ë—à—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –∏ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞.",
    "üå± –õ–ò–ß–ù–û–°–¢–¨": "–¢—ã ‚Äî AI-–ü–æ–º–æ—â–Ω–∏–∫ –õ–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ –†–æ—Å—Ç–∞. –ü–æ–º–æ–≥–∞–µ—à—å –ß–µ–ª–æ–≤–µ–∫—É —Ä–∞—Å–∫—Ä—ã—Ç—å—Å—è, –æ–±—Ä–µ—Å—Ç–∏ –≥–∞—Ä–º–æ–Ω–∏—é –∏ —Å–≤—è–∑—å —Å –¢–≤–æ—Ä—Ü–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π –º—è–≥–∫–∏–π —Ç–æ–Ω, –æ–±—Ä–∞–∑—ã, –º–µ—Ç–∞—Ñ–æ—Ä—ã."
}

# üü¢ /start ‚Äî –≤—ã–±–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üé® –í–ò–ó–£–ê–õ–´"), KeyboardButton("‚öñÔ∏è –ü–†–ê–í–û–í–ï–î")],
        [KeyboardButton("üìú –í–ï–ö–°–ï–õ–¨"), KeyboardButton("üå± –õ–ò–ß–ù–û–°–¢–¨")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è:", reply_markup=reply_markup)

# ‚úçÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text.strip()

    if user_message in specialists:
        user_specialists[user_id] = user_message
        await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º: {user_message}")
        return

    if user_id not in user_specialists:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ /start üôè")
        return

    specialist = user_specialists[user_id]
    system_prompt = specialists[specialist]

    await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ]
        )
        reply = response.choices[0].message["content"]
        await update.message.reply_text(reply)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á.")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    app.run_polling()

if __name__ == "__main__":
    main()
