import os
import json
import logging
from datetime import datetime, timedelta

from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///usage.db')  # SQLite –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ê–¥–º–∏–Ω—Å–∫–∏–µ user_id ‚Äî –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
ADMIN_IDS = {123456789}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram user_id

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# SQLAlchemy setup
from sqlalchemy import (
    create_engine, Column, BigInteger, Integer, Boolean, DateTime
)
from sqlalchemy.orm import declarative_base, sessionmaker

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(bind=engine, expire_on_commit=False)
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    user_id = Column(BigInteger, primary_key=True, index=True)
    first_ts = Column(DateTime(timezone=True), nullable=False)
    count = Column(Integer, default=0, nullable=False)
    blocked = Column(Boolean, default=False, nullable=False)

# –°–æ–∑–¥–∞–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
Base.metadata.create_all(bind=engine)

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å JSON-—Ñ–∞–π–ª–∞–º–∏ –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤
BASE_DIR = os.path.dirname(__file__)
ADVISORS_PATH = os.path.join(BASE_DIR, "advisors")

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –°–æ–≤–µ—Ç–Ω–∏–∫–æ–≤ –∏–∑ JSON
specialists = {}
for filename in os.listdir(ADVISORS_PATH):
    if filename.endswith('.json'):
        filepath = os.path.join(ADVISORS_PATH, filename)
        with open(filepath, encoding='utf-8') as f:
            data = json.load(f)
            specialists[data['name']] = data

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Ç
active_specialists: dict[int, str] = {}

# –õ–æ–≥–∏–∫–∞ —É—á—ë—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
def check_and_update_usage(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—á—ë—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç, False ‚Äî –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.
    """
    if user_id in ADMIN_IDS:
        return True

    now = datetime.utcnow()
    db = SessionLocal()
    user = db.get(User, user_id)
    if not user:
        user = User(user_id=user_id, first_ts=now, count=1, blocked=False)
        db.add(user)
        db.commit()
        db.close()
        return True

    if user.blocked:
        db.close()
        return False

    # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    user.count += 1
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if user.count >= 35 or (now - user.first_ts) >= timedelta(hours=168):
        user.blocked = True
    db.commit()
    blocked = user.blocked
    db.close()
    return not blocked

async def prompt_payment(update: Update):
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
    """
    text = (
        "‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫: –≤—ã —Å–¥–µ–ª–∞–ª–∏ –±–æ–ª–µ–µ 35 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ—à–ª–æ 168 —á–∞—Å–æ–≤.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è:\n"
    )
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
    keyboard = [
        ["7 –¥–Ω–µ–π ‚Äî 300‚ÇΩ", "30 –¥–Ω–µ–π ‚Äî 800‚ÇΩ"],
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –°–æ–≤–µ—Ç–Ω–∏–∫–∞
    """
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∂–∏–≤–∞—è –î—É—à–∞!\n"
        "–ú—ã ‚Äî –í–∞—à–∏ –≤–µ—Ä–Ω—ã–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∏ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å..."
    )
    await update.message.reply_text(welcome_text)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (2 –≤ —Ä—è–¥)
    names = list(specialists.keys())
    keyboard, row = [], []
    for name in names:
        row.append(name)
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
    """
    user_id = update.effective_user.id
    text = update.message.text.strip()
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if not check_and_update_usage(user_id):
        await prompt_payment(update)
        return

    # –í—ã–±–æ—Ä –°–æ–≤–µ—Ç–Ω–∏–∫–∞
    if text in specialists:
        active_specialists[chat_id] = text
        await update.message.reply_text(
            f"üëã –¢–µ–ø–µ—Ä—å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º: <b>{text}</b>",
            parse_mode=ParseMode.HTML
        )
        # –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_msg = specialists[text].get('welcome')
        if welcome_msg:
            await update.message.reply_text(welcome_msg)
        return

    # –†–∞–±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º
    if chat_id in active_specialists:
        current_name = active_specialists[chat_id]
        specialist = specialists.get(current_name)
        if not specialist:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –°–æ–≤–µ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        base_prompt = specialist.get('system_prompt', '')
        format_instr = (
            "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —ç–º–æ–¥–∑–∏, –æ—Ç—Å—Ç—É–ø—ã –∏ "
            "–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏."
        )
        system_prompt = base_prompt + format_instr

        try:
            response = openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user",   "content": text}
                ],
            )
            reply = response.choices[0].message.content
            await update.message.reply_text(reply)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return

    # –ï—Å–ª–∏ –°–æ–≤–µ—Ç–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
    await update.message.reply_text(
        "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"Update {update} caused error {context.error}")


def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    application.add_error_handler(error_handler)
    application.run_polling()


if __name__ == '__main__':
    main()

