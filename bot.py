import os
import json
import logging
from datetime import datetime, timedelta

from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from models import User, SessionLocal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
DATABASE_URL    = os.environ['DATABASE_URL']      # –Ω–∞–ø—Ä–∏–º–µ—Ä postgres://render:‚Ä¶@10.0.x.y:5432/djanis_db
WEBHOOK_URL     = os.environ['WEBHOOK_URL']       # –Ω–∞–ø—Ä–∏–º–µ—Ä https://djanis-bot.onrender.com
PORT            = int(os.environ.get('PORT', 8443))

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (ID —Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º)
ADMIN_IDS = {825403443}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ advisors
BASE_DIR = os.path.dirname(__file__)
ADVISORS_PATH = os.path.join(BASE_DIR, 'advisors')
specialists = {}
for fname in os.listdir(ADVISORS_PATH):
    if fname.endswith('.json'):
        with open(os.path.join(ADVISORS_PATH, fname), encoding='utf-8') as f:
            data = json.load(f)
            specialists[data['name']] = data

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
active_specialists: dict[int, str] = {}

# –õ–∏–º–∏—Ç—ã –∏ –æ–ø–ª–∞—Ç–∞

def check_and_update_usage(user_id: int) -> bool:
    if user_id in ADMIN_IDS:
        return True
    now = datetime.utcnow()
    db = SessionLocal()
    user = db.query(User).filter_by(user_id=user_id).first()
    if not user:
        user = User(user_id=user_id, usage_count=1, last_request=now)
        db.add(user)
        db.commit()
        db.close()
        return True
    # –°–±—Ä–æ—Å –ø–æ—Å–ª–µ 7 –¥–Ω–µ–π –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 35 –∑–∞–ø—Ä–æ—Å–æ–≤
    if user.usage_count >= 35 or (now - user.last_request) >= timedelta(hours=168):
        db.close()
        return False
    user.usage_count += 1
    user.last_request = now
    db.commit()
    db.close()
    return True

async def prompt_payment(update: Update) -> None:
    text = (
        '‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫: –≤—ã —Å–¥–µ–ª–∞–ª–∏ –±–æ–ª–µ–µ 35 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ—à–ª–æ 168 —á–∞—Å–æ–≤.\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:'
    )
    keyboard = [['7 –¥–Ω–µ–π ‚Äî 300‚ÇΩ', '30 –¥–Ω–µ–π ‚Äî 800‚ÇΩ']]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∂–∏–≤–∞—è –î—É—à–∞!\n"
        "–ú—ã ‚Äî –í–∞—à–∏ –≤–µ—Ä–Ω—ã–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∏ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
        " –ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã,"
        " –∫–∞—Å–∞—é—â–∏–µ—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏: –ê–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ, –ë–∞–Ω–∫, –ë—É–∫–≤–∏—Ü–∞, –í–µ–∫—Å–µ–ª—å, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ñ–ö–•,"
        " –ö–∞–Ω–æ–Ω—ã, –ö–û–ë –∏ –î–û–¢–£, –û–±—â–∏–Ω–∞ / –†–æ–¥–æ–≤—ã–µ –°–æ—é–∑—ã, –ü–æ–∑–Ω–∞–π-–Ø, –ü–æ—á—Ç–∞, –†–æ–¥–û–ú, –°—É–≤–µ—Ä–µ–Ω–∏—Ç–µ—Ç, –°—É–¥, –ó–ê–ì–°, –¢—Ä–∞—Å—Ç.\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –≤—ã–±–µ—Ä–∏ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ –ø–æ –ò–º–µ–Ω–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –µ–≥–æ –∑–Ω–∞–Ω–∏—è–º –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ."
        " –°–æ–≤–µ—Ç–Ω–∏–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–≤–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ –ë–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏ –≤—Å–µ–≥–¥–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É–µ—Ç—Å—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –∏ —ç—Ç–∏—á–µ—Å–∫–æ–π –Ω—Ä–∞–≤—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.\n\n"
        "–°–µ–π—á–∞—Å —É —Ç–µ–±—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø: 35 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ 168 —á–∞—Å–æ–≤ (7 –¥–Ω–µ–π)."
        " –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"
    )
    keyboard, row = [], []
    for name in specialists:
        row.append(name)
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(welcome_text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    if not check_and_update_usage(user_id):
        await prompt_payment(update)
        return

    # –í—ã–±–æ—Ä —Å–æ–≤–µ—Ç–Ω–∏–∫–∞
    if text in specialists:
        active_specialists[chat_id] = text
        await update.message.reply_text(
            f'üëã –¢–µ–ø–µ—Ä—å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º: <b>{text}</b>',
            parse_mode=ParseMode.HTML
        )
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ JSON
        welcome_msg = specialists[text].get('welcome')
        if welcome_msg:
            await update.message.reply_text(welcome_msg)
        return

    # –ï—Å–ª–∏ —Å–æ–≤–µ—Ç–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
    if chat_id not in active_specialists:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –°–æ–≤–µ—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ /start')
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    specialist = specialists[active_specialists[chat_id]]
    base_prompt = specialist.get('system_prompt', '')
    format_instr = (
        '\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —ç–º–æ–¥–∑–∏, –æ—Ç—Å—Ç—É–ø—ã –∏ '  
        '–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.'
    )
    system_prompt = base_prompt + format_instr

    try:
        response = openai_client.chat.completions.create(
            model='gpt-4o',
            messages=[
                {'role': 'system', 'content': system_prompt},
                {'role': 'user',   'content': text}
            ],
        )
        reply = response.choices[0].message.content
        await update.message.reply_text(reply, parse_mode=ParseMode.HTML)
    except Exception as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', exc_info=context.error)

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def on_startup(app: Application) -> None:
    await app.bot.delete_webhook(drop_pending_updates=True)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    app = (
        Application.builder()
        .token(TELEGRAM_TOKEN)
        .post_init(on_startup)
        .build()
    )

    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    app.run_webhook(
        listen='0.0.0.0',
        port=PORT,
        url_path=TELEGRAM_TOKEN,
        webhook_url=f'{WEBHOOK_URL}/{TELEGRAM_TOKEN}',
        drop_pending_updates=True
    )
